Notes to keep on how well using the stack goes.

following steps to test git-lfs install, I keep getting:
Username for 'https://s3.amazonaws.com':
Password for 'https://s3.amazonaws.com':

I can just hit enter and it works, but what a pain in the ass


updating my credential helper from osxkeychain
used command:
git config --global credential.helper /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret

nope, that didn't work

try setting batch=true in the ~/.gitconfig
nope, that didn't do anything

looks like adding:
[credential "https://s3.amazonaws.com"]
    helper = store

did the trick. Mother fuck, what a pain.

> put in PR to update doc

(ok, forgot to setup and that was a pain. )

OK. Ran through the Part 1 and set up my butler. in: /Users/yoachim/Scratch/Stack_Learn


And Sick pointed out I had an old version of git lfs installed. yeeesh. One problem is that all the errors are hard to debug.

LSST vocabulary that should be lookupable:

rerun:
raw
calexp
SourceTable



Maybe we could have an IRAF to LSST speak?
How does processCcd.py know how to do things? Is there a handy interative way to tune up the parameters, al la IRAF? 
In the docs, I would put in a link to the processCcd documentation. 
Why isn't this running in parallel? Is there a wrapper for lanching in parallel. Can I do a simple xargs to do each day on it's own using N-processors?
Why is this thing generating fits files I can't just pop open with ds9?
Would be nice to know the directory structure this thing is generating.
Really need to add a note on how long this is expected to run.
calling the display "mtv" is, um..., kind of ridiculous naming convention.

Would be good to have a labeled image so folks can see saturated, missing, cosmic, etc on the afw.display

ahh, I like that SourceCatalog just prints for me out of the box.
I'd like it to be easier to reach down to pixel values in .ExposureF objects? Looks like it's two steps?



We really need an illustrated guide to the reduction pipeline. Maybe start with 2 r-band and 2 i-band. See how they get ISRed, see how they get detection and cr removal etc display the 
raw, ISR, masks, warped, coadded. (and label with the path of each)

This is not the snappiest of processes. I guess we take data, and someone runs this during the day to see how we're doing?

Can I afw.display the number of images that went into a coadd as colored masks with transparency?

So how do I display a whole tract in ds9?

ok, after some backing up and re-running, I got the forced photometry to run. I'm not sure what happened, and it still looks like the R-band threw some strange errors.

Made it through to the end. I don't understand why my CMD looks different. That's concerning.


Looks like butler.getKeys() doesn't work.


----------------------

OK, looks like I'm going to want to run jointcal!

This works, after cargo-culting some config stuff:
jointcal.py DATA --rerun coaddPhot:jointOut --configfile join_config.py --id filter=HSC-I
looks like:
jointcal.py DATA --rerun coaddPhot:jointOut --configfile join_config.py --id
does both filters (probably independantly?) 

join_config.py:
from lsst.utils import getPackageDir
from lsst.meas.algorithms import LoadIndexedReferenceObjectsTask
import os

for refObjLoader in (config.astrometryRefObjLoader,
                     config.photometryRefObjLoader):
    refObjLoader.retarget(LoadIndexedReferenceObjectsTask)
    refObjLoader.load(os.path.join(getPackageDir("obs_subaru"), "config", "filterMap.py"))
    refObjLoader.ref_dataset_name = "ps1_pv3_3pi_20170110"




Doesn't run on processCcd. Guess it needs the coadd info. 
needs a "cal_ref_"


handy notebook for looking at the astrometry residuals at: https://github.com/lsst/jointcal/blob/master/notebooks/CheckSimAstrom.ipynb

---------------

Next up, see if I can load a bunch of catalogs, match the objects (?), and see how they look with old and new wcs.


